@model PowerAppsCMS.Models.ProductReferences

@{
    ViewBag.Title = "Edit Product Reference";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<nav aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item">Product Management</li>
        <li class="breadcrumb-item"><a href="@Url.Action("Index", "ProductReference")">Product References</a></li>
        <li class="breadcrumb-item active" aria-current="page">Edit Product Product Reference</li>
    </ol>
</nav>
<h1 class="page-title">Edit Product Reference</h1>

@using (Html.BeginForm())
{
    @*@Html.AntiForgeryToken()*@

    <div class="row">
        <div class="col-xl-9 col-12">
            <div class="card shadow">
                <div class="card-header">
                    Edit Product Reference
                </div>

                <div class="custom-form-container">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.ID)
                    <input type="text" class="currentPage hide" id="currentPage" name="currentPage" value="@ViewBag.Page" />
                    <input type="text" class="hide" id="haveProduct" value="@ViewBag.HaveProduct" />

                    <div class="row">
                        <div class="col-xl-6 col-12 custom-form-field">
                            <p class="form-custom-label">Product Reference</p>
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control full-width", placeholder = "Enter Product Reference Name" } })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xl-6 col-12 custom-form-field">
                            <p class="form-custom-label">Product Group</p>
                            @Html.DropDownList("ProductGroupID", null, "Select Product Group", htmlAttributes: new { @class = "form-control full-width", placeholder = "Select Product Group" })
                            @Html.ValidationMessageFor(model => model.ProductGroupID, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-12 custom-form-field">
                            <p class="form-custom-label">Man Hour PB In House</p>
                            @Html.EditorFor(model => model.MHPBIH, new { htmlAttributes = new { @type = "number", @class = "form-control full-width", placeholder = "Enter Man Hour PB In House" } })
                            @Html.ValidationMessageFor(model => model.MHPBIH, "", new { @class = "text-danger validation-error" })
                        </div>
                        <div class="col-lg-6 col-12 custom-form-field">
                            <p class="form-custom-label">Man Hour PB Out House</p>
                            @Html.EditorFor(model => model.MHPBOH, new { htmlAttributes = new { @type = "number", @class = "form-control full-width", placeholder = "Enter Man Hour PB Out House" } })
                            @Html.ValidationMessageFor(model => model.MHPBOH, "", new { @class = "text-danger validation-error" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-12 custom-form-field">
                            <p class="form-custom-label">Man Hour Fab In House</p>
                            @Html.EditorFor(model => model.MHFabIH, new { htmlAttributes = new { @type = "number", @class = "form-control full-width", placeholder = "Enter Man Hour Fab In House" } })
                            @Html.ValidationMessageFor(model => model.MHFabIH, "", new { @class = "text-danger validation-error" })
                        </div>
                        <div class="col-lg-6 col-12 custom-form-field">
                            <p class="form-custom-label">Man Hour Fab Out House</p>
                            @Html.EditorFor(model => model.MHFabOH, new { htmlAttributes = new { @type = "number", @class = "form-control full-width", placeholder = "Enter Man Hour Fab Out House" } })
                            @Html.ValidationMessageFor(model => model.MHFabOH, "", new { @class = "text-danger validation-error" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-12 custom-form-field">
                            <p class="form-custom-label">Man Hour Painting In House</p>
                            @Html.EditorFor(model => model.MHPaintingIH, new { htmlAttributes = new { @type = "number", @class = "form-control full-width", placeholder = "Enter Man Hour Painting In House" } })
                            @Html.ValidationMessageFor(model => model.MHPaintingIH, "", new { @class = "text-danger validation-error" })
                        </div>
                        <div class="col-lg-6 col-12 custom-form-field">
                            <p class="form-custom-label">Man Hour Painting Out House</p>
                            @Html.EditorFor(model => model.MHPaintingOH, new { htmlAttributes = new { @type = "number", @class = "form-control full-width", placeholder = "Enter Man Hour Painting Out House" } })
                            @Html.ValidationMessageFor(model => model.MHPaintingOH, "", new { @class = "text-danger validation-error" })
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-lg-6 col-12 custom-form-field">
                            <p class="form-custom-label">Factor</p>
                            @Html.EditorFor(model => model.Factor, new { htmlAttributes = new { @type = "number", @class = "form-control full-width", placeholder = "Enter Factor" } })
                            @Html.ValidationMessageFor(model => model.Factor, "", new { @class = "text-danger validation-error" })
                        </div>
                        <div class="col-lg-6 col-12 custom-form-field">
                            <p class="form-custom-label">Using Or Operator</p>
                            @Html.EditorFor(model => model.IsOperatorOr)
                            @Html.ValidationMessageFor(model => model.IsOperatorOr, "", new { @class = "text-danger validation-error" })
                        </div>
                    </div>
                    <div class="row justify-content-between mt-5">
                        <div class="col-auto">
                            <a href="@Url.Action("Index", "ProductReference",  new { page = ViewBag.Page})" class="btn btn-primary mb-3"><i data-feather="arrow-left"></i> &nbsp; Back to Product Reference</a>
                        </div>
                        <div class="col-auto">
                            <button type="submit" class="btn btn-success submit mr-0 mb-3"><i data-feather="save"></i> &nbsp; Save</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

}

<div class="loading hide">
    <i class="fa fa-2x fa-spinner fa-spin"></i>
    <label>Please wait while Saving Data...</label>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(function () {
            var haveProduct = $('#haveProduct').val();

            if (haveProduct == "1") {
                $("#ProductGroupID").prop('disabled', true);
            }
            else {
                $("#ProductGroupID").prop('disabled', false);
            }

            $('.submit').click(function (e) {
                var productGroup = $('#ProductGroupID').val();

                $("[data-valmsg-for='ProductGroupID']").text("");

                if (!$('form').valid() && (productGroup == null || productGroup == '')) {
                    $("[data-valmsg-for='ProductGroupID']").text("Product group must be selected");
                    e.preventDefault();
                }
                else if (!$('form').valid()) {
                    e.preventDefault();
                }
                else if (productGroup == null || productGroup == '') {
                    $("[data-valmsg-for='ProductGroupID']").text("Product group must be selected");
                    e.preventDefault();
                }
                else {
                    $('.loading').removeClass('hide');
                    $('.submit').attr('disabled', 'disabled');
                    $("[data-valmsg-for='ProductGroupID']").text("");
                    $('form').submit();
                }                
            });

            if ('@ViewBag.Message' != "") {
                $('.loading').addClass('hide');
                alert("Product Reference successfully updated");
                console.log("success");
                window.location.href = "@Url.Action("Details", "ProductReference", new { id = ViewBag.ProductReferenceID , page = ViewBag.CurrentPage })";
            }

            $.validator.methods.number = function (value, element) {
                return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:[\s\.,]\d{3})+)(?:[\.,]\d+)?$/.test(value);
            }
        });
    </script>
}
