//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PowerAppsCMS.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PowerAppsCMSEntities : DbContext
    {
        public PowerAppsCMSEntities()
            : base("name=PowerAppsCMSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Holiday> Holidays { get; set; }
        public virtual DbSet<Material> Materials { get; set; }
        public virtual DbSet<Part> Parts { get; set; }
        public virtual DbSet<ProcessGroup> ProcessGroups { get; set; }
        public virtual DbSet<ProcessIssue> ProcessIssues { get; set; }
        public virtual DbSet<ProductGroupCapacity> ProductGroupCapacities { get; set; }
        public virtual DbSet<ProductGroup> ProductGroups { get; set; }
        public virtual DbSet<ProductSubGroup> ProductSubGroups { get; set; }
        public virtual DbSet<ReasonIssue> ReasonIssues { get; set; }
        public virtual DbSet<ReasonPause> ReasonPauses { get; set; }
        public virtual DbSet<ShopFloorSchedule> ShopFloorSchedules { get; set; }
        public virtual DbSet<UserImage> UserImages { get; set; }
        public virtual DbSet<ProcessDependency> ProcessDependencies { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<PROSalesOrder> PROSalesOrders { get; set; }
        public virtual DbSet<PRO> Pros { get; set; }
        public virtual DbSet<MaterialPreparationProcess> MaterialPreparationProcesses { get; set; }
        public virtual DbSet<MaterialPreparationProcessCategory> MaterialPreparationProcessCategories { get; set; }
        public virtual DbSet<ComponentMaterialPreparationProcess> ComponentMaterialPreparationProcesses { get; set; }
        public virtual DbSet<MasterProcess> MasterProcesses { get; set; }
        public virtual DbSet<ProcessDailySchedule> ProcessDailySchedules { get; set; }
        public virtual DbSet<Feedback> Feedbacks { get; set; }
        public virtual DbSet<MemoPRO> MemoPROes { get; set; }
        public virtual DbSet<MemoType> MemoTypes { get; set; }
        public virtual DbSet<Memo> Memos { get; set; }
        public virtual DbSet<SalesOrder> SalesOrders { get; set; }
        public virtual DbSet<MemoJobCard> MemoJobCards { get; set; }
        public virtual DbSet<HolidayDetail> HolidayDetails { get; set; }
        public virtual DbSet<Process> Processes { get; set; }
        public virtual DbSet<ProcessActivity> ProcessActivities { get; set; }
        public virtual DbSet<ProcessAssign> ProcessAssigns { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<MasterPlanSchedule> MasterPlanSchedules { get; set; }
        public virtual DbSet<DataZemesFail> DataZemesFails { get; set; }
        public virtual DbSet<MemoComponent> MemoComponents { get; set; }
        public virtual DbSet<Component> Components { get; set; }
        public virtual DbSet<ViewProductProcessDailySchedule> ViewProductProcessDailySchedules { get; set; }
        public virtual DbSet<ComponentsTemp> ComponentsTemps { get; set; }
        public virtual DbSet<tempImage> tempImages { get; set; }
        public virtual DbSet<UserProcessGroup> UserProcessGroups { get; set; }
        public virtual DbSet<ProductComposition> ProductCompositions { get; set; }
        public virtual DbSet<ChangeQCStatusLog> ChangeQCStatusLog { get; set; }
        public virtual DbSet<ProcessStatusLogs> ProcessStatusLogs { get; set; }
        public virtual DbSet<ProductReferences> ProductReferences { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
    
        public virtual ObjectResult<GetProByProductGroupID_Result> GetProByProductGroupID(Nullable<int> productGroupID)
        {
            var productGroupIDParameter = productGroupID.HasValue ?
                new ObjectParameter("ProductGroupID", productGroupID) :
                new ObjectParameter("ProductGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProByProductGroupID_Result>("GetProByProductGroupID", productGroupIDParameter);
        }
    
        public virtual ObjectResult<PRO> FunctionGetProByProductGroupID(Nullable<int> productGroupID)
        {
            var productGroupIDParameter = productGroupID.HasValue ?
                new ObjectParameter("ProductGroupID", productGroupID) :
                new ObjectParameter("ProductGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRO>("FunctionGetProByProductGroupID", productGroupIDParameter);
        }
    
        public virtual ObjectResult<PRO> FunctionGetProByProductGroupID(Nullable<int> productGroupID, MergeOption mergeOption)
        {
            var productGroupIDParameter = productGroupID.HasValue ?
                new ObjectParameter("ProductGroupID", productGroupID) :
                new ObjectParameter("ProductGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PRO>("FunctionGetProByProductGroupID", mergeOption, productGroupIDParameter);
        }
    
        public virtual int GetSfsProcess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSfsProcess");
        }
    
        public virtual int GetSfsDailyActivity(Nullable<int> proID)
        {
            var proIDParameter = proID.HasValue ?
                new ObjectParameter("ProID", proID) :
                new ObjectParameter("ProID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSfsDailyActivity", proIDParameter);
        }
    }
}
